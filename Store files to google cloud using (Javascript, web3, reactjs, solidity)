import React, { Component } from 'react';
import Popup from "reactjs-popup";
import './App.css';
import './index.css';
import ipfs from './ipfs';
import storehash from './storehash';
import firebase  from './firebase';
import {storage,db} from './firebase';



export class AddDocument extends Component {

  constructor(props) {
    super(props)
     // this.id=React.createRef();
      //this.fileName=React.createRef();
      this.submituserRegistrationForm = this.submituserRegistrationForm.bind(this);
  }

    
    state = {
      Documents:[],
      condition:'',
      ipfsHash:null,
      buffer:'',
      blob:'',
      ethAddress:'',
      doc:'',
      b:"",

      idu:" ",
      fields: {},
      errors: {},
      touched: {},
      formSubmitted: false,
      e:"",
      arrsign:[],
      arrsigni:[]

    
  
 }
 
  submitData=async(event) =>{
 
        const FieldValue = db.FieldValue;
      

        const collectionRef = db.collection("content");        
        
 var docname;
 
        
          var w=0;
        
             const userRef = await db.collection("content").add({
              patientId:this.buf2hex(this.state.idu),
              hashId: this.state.ipfsHash,
              fileName:this.buf2hex(this.state.des)

                }); 
                let writeCount = 0;

                var myArray = str.split(' ');
                var eccrypto = require("eccrypto");
         
              var publicKey = Buffer.from([4, 86, 82, 58, 244, 11, 140, 41, 132, 245, 184, 162, 163, 98, 49, 119, 168, 235, 252, 50, 6, 91, 147, 191, 190, 61, 65, 63, 101, 164, 132, 213, 188, 106, 26, 203, 171, 215, 240, 151, 7, 193, 10, 151, 103, 107, 1, 135, 117, 225, 5, 41, 55, 57, 18, 205, 98, 178, 82, 135, X, X, X, X, X],'hex');
              var privateKey= Buffer.from([238, 239, 199, 101, 188, 134, 13, 13, 195, 172, 125, 168, 225, 189, 72, 148, 225, 200, 127, 218, 204, 11, 150, 146, 180, 243, 195, X, X, X, X, X],'hex');
              


                console.log(myArray[0]);
                const arrsign =[] ;
                const arrsigni =[] ;

            
                myArray.forEach(async(value: string) =>  {
       
                 const r=  await this.signkey(eccrypto,privateKey,value);
                 arrsign.push(r);
                 this.setState({
                  arrsign});
                
              
                const ru= await this.buf2hex(r);
                arrsigni.push(ru);
                this.setState({
                  arrsigni});


                const promises: Promise<DocumentReference>[] = [];

                this.state.arrsigni.forEach((value: string) => {
               
                #TO BE COMPLETE
                
                 }
                );
   
 
              var condition,w;
              if(this.state.transactionHash===null){
                condition='2';
              }
              else{
               condition='1';
             
              }
        this.setState({condition});
            }
  
          
   signId =async(eccrypto,privateKey ,i)=>{
    console.log(i);

    var sigId,id;
    await eccrypto.sign(privateKey, i).then(function(sig){
        sigId=sig;
        console.log(sig);
      });
    id= sigId; 
    console.log(id);
return id;
    
    }

 
 captureFile = (event) => {
     
         const file = document.getElementById("fileName").files[0];
         console.log(file);
 
         let reader = new window.FileReader();
                 console.log(reader);
 
         reader.readAsText(file);
         reader.onloadend = () => this.toEncryptFile(reader);
 
       };
 
       toEncryptFile = async(reader) => {
       
         #TO BE COMPLETE
         
         };
         
 
 buf2hex (buffer){ // buffer is an ArrayBuffer
   return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');
 }
 
 
  toBuffer = async() => {
   
   const blob = new Blob([this.state.doc],);
  
 
   this.setState({blob});
  
   var ft=await blob.text();
 
 
    const buffer= Buffer.from(ft);
 
    this.setState({buffer});
    console.log(this.state.buffer);
    const b=buffer;
    this.setState({b});
    await this.onClick();
 
   };
 
 
 onClick = async (event) => {
 
   console.log("onsubmit");
   
   const accounts = await window.ethereum.enable();
   var e=false;

       const ethAddress= await storehash.options.address;
       this.setState({ethAddress});
       console.log(ethAddress);

     const ipfsHash=await ipfs.add(this.state.b);
      
         this.setState({ ipfsHash:ipfsHash[0].hash });
             console.log(this.state.ipfsHash);
             await storehash.methods.isExistp(this.buf2hex(this.state.idu)).call(function (error, result) {
              console.log(result);

    if(result===true){
      e=result;
       console.log("exi");
    }
     else{
         console.log("not ex");
}});
         console.log(e);


       if(e===false){
         console.log("not exit");
         this.setState({e});

       }

       else{
    await storehash.methods.addDocu(this.buf2hex(this.state.idu),this.state.ipfsHash).send({
         from: accounts[0] 
         },(error, transactionHash) =>{
         console.log(transactionHash);
 
           this.setState({transactionHash});
  });
    
 
     await this.toCloudstorage(this.state.blob);
   
        }
      }
 
        toCloudstorage = async(ft) => {

       
         var u,sn;
         console.log('start of upload',ft);
     
         const uploadTask =  await storage.ref(`/${this.state.ipfsHash}`).put(ft).then(function(snapshot) {
       sn=snapshot;
           console.log(snapshot.ref.getDownloadURL(),'Uploaded a blob or file!');
         });  
 
           await sn.ref.getDownloadURL().then(function(downloadURL) {
             console.log('File available at', downloadURL);
 
              u=  downloadURL;
       
     });  
       if(u!=null){
 
        
         console.log('done upload in storage');
         await this.submitData();
       
       }
 else{
   console.log('there is a problem of file upload');
 }
              
       }
     
handleChangefield(e) {
  let fields = this.state.fields;
  console.log(e.target.name,e.target.value);
  fields[e.target.name] = e.target.value;
  this.setState({
    fields
  })

}

handleTouch(e){
   let {touched} = this.state;
  if(e.target.name && touched[e.target.name] != true){
      touched[e.target.name] = true;
       this.setState({
        touched
      });
      console.log(this.state.touched);

  }
}

submituserRegistrationForm=async(e)=> {
  e.preventDefault();
  this.setState({
    formSubmitted: true
  });
  if (this.validateForm()) {
console.log("1");
       this.captureFile();

  }
 }
 
validateForm() {
#TO BE COMPLETE
}
    
   
render() {

  return (

   #TO BE COMPLETE

    );
  } //render
} //App



